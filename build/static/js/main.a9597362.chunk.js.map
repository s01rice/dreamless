{"version":3,"sources":["pages/Home.js","images/404-illustration.svg","pages/utility/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","PageNotFound","src","NotFoundImage","width","height","alt","to","App","location","useLocation","useEffect","document","querySelector","style","scrollBehavior","window","scroll","top","pathname","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAMeA,MAJf,WACE,OAAO,qBAAKC,UAAU,iBAAf,oCCHM,MAA0B,6CC4B1BC,MAxBf,WACE,OACE,qBAAKD,UAAU,gCAAf,SACE,+BACE,qBAAKA,UAAU,qDAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,qBAAKE,IAAKC,EAAeC,MAAM,MAAMC,OAAO,MAAMC,IAAI,uBAExD,qBAAKN,UAAU,OAAf,mFAGA,cAAC,IAAD,CAAMO,GAAG,OAAOP,UAAU,mDAA1B,sCCgBCQ,MAtBf,WACE,IAAMC,EAAWC,cAQjB,OANAC,qBAAU,WACRC,SAASC,cAAc,QAAQC,MAAMC,eAAiB,OACtDC,OAAOC,OAAO,CAAEC,IAAK,IACrBN,SAASC,cAAc,QAAQC,MAAMC,eAAiB,KACrD,CAACN,EAASU,WAGX,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWvB,IAEpC,cAAC,IAAD,CAAOsB,KAAK,IAAZ,SACE,cAAC,EAAD,YCdUE,QACW,cAA7BP,OAAOP,SAASe,UAEe,UAA7BR,OAAOP,SAASe,UAEhBR,OAAOP,SAASe,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJhB,SAASiB,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a9597362.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n  return <div className=\"text-center h1\">This is the Home page</div>;\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/404-illustration.ee4d58f7.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport NotFoundImage from '../../images/404-illustration.svg';\n\nfunction PageNotFound() {\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <main>\n        <div className=\"px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto\">\n          <div className=\"max-w-2xl m-auto mt-16\">\n            <div className=\"text-center px-4\">\n              <div className=\"inline-flex mb-8\">\n                <img src={NotFoundImage} width=\"176\" height=\"176\" alt=\"404 illustration\" />\n              </div>\n              <div className=\"mb-6\">\n                Hmm...this page doesnâ€™t exist. Try searching for something else!\n              </div>\n              <Link to=\"/v1/\" className=\"btn bg-indigo-500 hover:bg-indigo-600 text-white\">\n                Back To Home\n              </Link>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default PageNotFound;\n","import React, { useEffect } from 'react';\nimport { Switch, Route, useLocation } from 'react-router-dom';\n\nimport './css/style.scss';\n\n// import './charts/ChartjsConfig';\n\n// Import pages\nimport Home from './pages/Home';\nimport PageNotFound from './pages/utility/PageNotFound';\n\nfunction App() {\n  const location = useLocation();\n\n  useEffect(() => {\n    document.querySelector('html').style.scrollBehavior = 'auto';\n    window.scroll({ top: 0 });\n    document.querySelector('html').style.scrollBehavior = '';\n  }, [location.pathname]); // triggered on route change\n\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/v1/\" component={Home} />\n\n        <Route path=\"*\">\n          <PageNotFound />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}